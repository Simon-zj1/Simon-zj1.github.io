[{"url":"/posts/0.html","content":""},{"title":"Gallery","url":"/posts/de374c34.html","content":"\n\n    \n    \n      壁纸\n      收藏的一些壁纸\n      \n    \n  \n\n    \n    \n      漫威\n      关于漫威的图片\n      \n    \n  \n\n\n\n","categories":["gallery"]},{"title":"Hexo+Github个人网站搭建保姆级教程（Mac）","url":"/posts/5ec7e920.html","content":"前言：本教程是基于金金的文章内容，记录本人从零开始学习搭建个人网站的过程，希望能帮助到大家，如果有什么问题，欢迎评论区留言。\n搭建设备：MacBook M1 Pro\n博客环境搭建安装Node.jsHexo本身是一个使用Node.js编写的工具，它的核心功能是生成静态网页、渲染Markdown以及调用不同主题等，而这些主要核心功能的实现依赖于Node.js运行环境。首先我们进入Node.js官网下载Node.js安装包。官网给出下面两种安装方法，一种是终端安装，另一种是下载安装包，根据个人习惯下载即可。下载安装包的话需要注意选择好适合自己电脑版本的安装包，下载后一直点安装就可以了。\n\n    [{\"url\":\"/img/hexo-tutorial/Nodejs.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n安装Hexo安装Node.js的时候一般会自动安装npm，npm(Node Package Manager)是Node包管理器，可以用来安装库、卸载插件、更新依赖、运行脚本等。检查一下Node.js和npm是否安装成功，在Mac终端输入下面命令，可以查看Node.js和npm的版本号。\n$ node -v # 查看刚刚安装的Node.js版本$ npm -v # 查看npm版本\n出现类似下图版本号，说明安装成功，如果有报错信息可以评论区留言。\n\n    [{\"url\":\"/img/hexo-tutorial/node-v.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n由于通过Node.js安装的npm默认连接国外服务器，在中国访问速度很慢，因此我们可以借助淘宝镜像源来加速npm的下载速度，下载镜像源的命令如下。\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org  \n然后再次检查一下npm的版本号，出现类似下图版本号，说明安装成功，如果有报错信息可以评论区留言。\n$ cnpm -v # 查看刚刚安装的cnpm版本\n\n    [{\"url\":\"/img/hexo-tutorial/cnpm.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n接下来，我们安装Hexo框架，在终端输入下面命令，可以安装Hexo框架。\n$ cnpm install hexo-cli -g\n同样检查一下Hexo的版本号，出现类似下图版本号，说明安装成功，如果有报错信息可以评论区留言。\n$ hexo -v # 查看刚刚安装的Hexo版本\n出现类似下图版本号，说明安装成功.\n\n    [{\"url\":\"/img/hexo-tutorial/hexo-cli.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n使用Hexo搭建个人博客前言：环境搭建好后，我们可以开始使用Hexo来搭建个人网站了。建议：可以创建一个文件夹，把接下来搭建过程中的文件都放在里面，如果搭建过程出现错误也无需担心，直接删掉文件夹，从头来过。下面是在创建和管理博客过程中常用的指令，建议记一下，方便后续使用。\n$ pwd # 查看当前工作目录$ cd./.. # 返回上一级目录$ hexo init blog # 初始化博客$ mkdir xxx # 创建xxx文件夹$ cd xxx # 进入xxx文件夹$ hexo clean # 清除缓存,经常用到，每次对主题文件做修改的时候需要清除缓存   $ hexo g # 生成静态文件$ hexo s # 启动服务$ hexo d # 部署到github\n\n初始化博客我们先创建一个文件夹，在终端输入下面命令。\n$ mkdir hexo1 # 创建一个名为hexo1文件夹\n接下来，我们进入hexo1文件夹。\n$ cd hexo1\n查看当前工作目录。\n$ pwd\n\n    [{\"url\":\"/img/hexo-tutorial/mkdir.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n接下来，我们初始化博客，在终端输入下面命令.\n$ hexo init\n初始化成功会在终端显示下面信息。\n&quot;Start blogging with Hexo!&quot;\n查看一下hexo1文件夹生成了哪些文件。\n$ ls -l\n\n    [{\"url\":\"/img/hexo-tutorial/ls.png\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n    [{\"url\":\"/img/hexo-tutorial/ls-l.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n接下来我们启动本地博客服务，查看你搭建的网站是否可以正常访问。\n$ hexo s\n将终端中输出的下面信息中的http://localhost:4000/复制到浏览器。\n&quot;Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.&quot;\n打开后的页面如下图所示，hexo已经为你创建了一篇叫Hello World的博客啦\n\n    [{\"url\":\"/img/hexo-tutorial/hexo2.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n在终端使用control+c关闭服务，平时我们可以用hexo s启动预览文章，看修改的内容是否呈现，包括我此时在编辑的教程就是在VScode中编辑.md文件，然后在终端使用hexo s来预览效果，这样修改的内容就可以实时显示在预览中，不用使用hexo clean每次清理，或者每次修改都使用hexo g重新生成，直接在网页端刷新即可。注意：修改了主题文件或者配置文件，需要清理缓存，重新生成才能生效，不然会出现主题样式和配置文件未生效的情况。\n创建和管理博客常用的hexo指令\n$ hexo n &quot;xxx&quot; # 新建一篇名叫xxx的博客$ hexo g # 生成静态文件$ hexo d # 部署到github$ hexo s # 启动服务$ hexo clean # 清除缓存\n\n新建一篇博客使用下面命令创建一篇博客。\n$ hexo n &quot;new post&quot;\n\n    [{\"url\":\"/img/hexo-tutorial/hexo3.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n我们进入终端输出的文件夹地址，可以看到刚刚创建的博客和系统自己生成的一篇.md文件\n\n    [{\"url\":\"/img/hexo-tutorial/hexo4.png\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n编辑博客我们在终端进入到刚刚的博客文件夹，使用下面命令编辑刚刚创建的博客。（当然也可以一步到位，直接在终端输入”vim .&#x2F;source&#x2F;_posts&#x2F;new-post.md”）\n$ cd ./source/_posts # 进入_posts文件夹$ pwd # 查看当前工作目录$ vim new-post.md # 编辑刚刚创建的博客\nvim是一个文本编辑器，可以用来编辑.md文件,当我们在终端输入”vim new-post.md”时，会打开vim编辑器，编辑刚刚创建的博客。\n\n    [{\"url\":\"/img/hexo-tutorial/vim.png\",\"alt\":\"\",\"title\":\"\"}]\n  \n提示：我们可以在vim编辑器中编辑文本内容，同样.md文件我们也可以用其他模式编辑，比如Vscode和系统自带的文本编辑器等，根据个人喜欢自己选择即可。在使用vim编辑博客时,下面是一些常用的操作。1、进入insert模式，即编辑模式。这里有好几种方法，比如在英文输入法模式下，输入“i”或者“o”等都可以进入insert模式，他们会有一点区别，比如是在光标当前位置插入还是换行插入等，可自行查阅。2、退出insert模式，按下ESC键，此时无法编辑，直接退出vim的话输入”：q”，保存退出输入”：wq”。注意：引号里面的分号是英文输入法下的，是先输入分号，然后输入q或者wq。\n\n    [{\"url\":\"/img/hexo-tutorial/vim2.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n    [{\"url\":\"/img/hexo-tutorial/vim3.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n在终端输入hexo s重新生成一下，打开网页预览。\n\n    [{\"url\":\"/img/hexo-tutorial/blog.png\",\"alt\":\"\",\"title\":\"\"}]\n  \n可以看到我们刚刚编辑的内容已经出现在网站上啦！还有很多指令需要小伙伴们自己学习一下，网上资源很多，这里就不多说啦。（其实是偷懒）\n本地博客部署到github前言：我们上面的操作都是在本地部署，只能在本机访问,而当我们将其部署到远端（如github pages、Cloudflare Pages等）的时候，可以通过绑定自己的域名，就可以让全球用户访问你的博客了。\ngithub配置首先，登录自己的github账号（没有的话需要注册），然后点击左上角的“+”号，点击“New repository”。\n\n    [{\"url\":\"/img/hexo-tutorial/github.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n接下来，创建仓库，需要注意仓库的命名规则，⚠️用户名.github.io\n\n    [{\"url\":\"/img/hexo-tutorial/github2.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n填写完成后，拉到最下面点击“Create repository”即可。\n安装git到git官网下载即可，选择适合自己的版本。\n\n    [{\"url\":\"/img/hexo-tutorial/git.png\",\"alt\":\"\",\"title\":\"\"}]\n  \n安装成功后，从终端进入到hexo1目录，将下面命令输入到终端。\n$ cnpm install hexo-deployer-git --save # 安装git插件\n\n添加仓库地址成功后，我们需要到hexo的配置文件中添加git的配置。首先找到hexo的根目录，如下图所示.\n\n    [{\"url\":\"/img/hexo-tutorial/vim4.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n然后输入vim _config.yml，打开配置文件，按照下面内容进行修改。其中修改的内容需要复制你的github仓库的SSH部分的内容，然后粘贴到配置文件中，保存退出。⚠️注意：！！！在vim编辑时，要注意分号后需要有空格，不然会报错。\n\n    [{\"url\":\"/img/hexo-tutorial/github3.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n    [{\"url\":\"/img/hexo-tutorial/vim5.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n提醒：这里补充说明一下为什么选择SSH而不选择HTTPS，因为HTTPS是需要输入用户名和密码的，而SSH是不需要的，所以我们选择SSH，我们每次对hexo的配置文件进行修改的时候，都不需要输入用户名和密码，直接hexo d即可部署到远端。\nSSH配置设置git接下来需要让git知道你是谁，所以终端输入下面命令。\n$ git config --global user.name &quot;username&quot; # “username”换成你的github用户名$ git config --global user.email &quot;email&quot; # “email”换成你的github邮箱\n\n    [{\"url\":\"/img/hexo-tutorial/git2.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\ngithub ssh密钥配置第一步： 上面我们告诉git我们的身份了，接下来检查一下是否配置了ssh密钥。\n$ cd ~/.ssh # 进入.ssh文件夹$ ls # 列出.ssh文件夹下的文件\n如果列出的文件中有id_rsa和id_rsa.pub，那么说明已经配置了ssh密钥，没有则重新创建新的即可。\n\n    [{\"url\":\"/img/hexo-tutorial/ssh.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n创建新的ssh密钥方法\n$ ssh-keygen -t rsa -C &quot;email&quot; # “email”换成你的github邮箱\n然后在终端进入.ssh文件夹，并输入ls会发现有新生成的id_rsa和id_rsa.pub文件，这就是我们的ssh密钥。说明：id_rsa是私钥，id_rsa.pub是公钥，我们要把id_rsa.pub内容添加到github上，才能部署到github上。第二步： 基于我们成功配置ssh密钥的情况，我们需要添加SSH的Key到github，获取公钥内容。\n$ cat ~/.ssh/id_rsa.pub # 获取公钥内容\n\n\n    [{\"url\":\"/img/hexo-tutorial/ssh2.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n第三步： 将公钥内容添加到github仓库。\n\n    [{\"url\":\"/img/hexo-tutorial/ssh3.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n    [{\"url\":\"/img/hexo-tutorial/ssh4.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n第四步： 验证是否配置成功，用私有密钥与Github进行交互验证。\n$ ssh -T git@github .com # 验证是否配置成功，用私有密钥与Github进行交互验证\n终端输出“Hi 用户名! You’ve successfully authenticated, but GitHub does not provide shell access”表明你配置成功了。\n\n    [{\"url\":\"/img/hexo-tutorial/ssh5.jpg\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n部署到github完成上述操作后，我们就可以部署到github了。\n$ hexo d # 部署到github\n然后你可以查看你的github仓库，会发现多了很多文件，说明成功了。这时，你就可以用仓库名来访问你的博客了。这只是最初的搭建，页面布局比较简单，后面会讲到如何添加主题，以及其他的东西，后面的文章会介绍Hexo的主题使用，以及其他方面关于Hexo的使用，大家可以关注一下。如果大家搭建过程遇到问题，可以发邮箱📮或者评论区留言。\n","categories":["hexo"]}]